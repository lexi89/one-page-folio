<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexey Yanovski</title>
    <description>Developer | Marketer | Writer | Human</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 11 May 2016 15:36:26 +0100</pubDate>
    <lastBuildDate>Wed, 11 May 2016 15:36:26 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>The &quot;2 Rails Apps / Week&quot; Journal</title>
        <description>&lt;p&gt;This page documents my progress towards Ruby on Rails mastery.&lt;/p&gt;

&lt;p&gt;The purpose of this is to expose myself to as much Rails code as possible, practice research &amp;amp; planning, and documenting. As a by-product, I will create a portfolio of live mini-apps, be able to see how far I’ve come, and expose the bullshit monkey-mind insecurities that come up in the process.&lt;/p&gt;

&lt;p&gt;The format of the exercise is this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Day 1&lt;/em&gt;: Decide on a feature to explore. Document the plan and research.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Day 2&lt;/em&gt;: Build and deploy the demo app to Heroku.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Day 3&lt;/em&gt;: Document reflections and add demo-app to potfolio listing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;resources-for-checking-out-features&quot;&gt;Resources for checking out features:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://gorails.com/&quot;&gt;Gorails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/RailscastsReloaded&quot;&gt;Railscasts Reloaded&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;templates&quot;&gt;Templates&lt;/h3&gt;

&lt;p&gt;HTML5 boilerplate?
Bootstrap template?&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;twitter-api-practice&quot;&gt;#1 — Twitter API practice&lt;/h1&gt;

&lt;h3 id=&quot;le-plan&quot;&gt;Le Plan&lt;/h3&gt;

&lt;p&gt;Connect to API with the &lt;a href=&quot;https://github.com/sferik/twitter&quot;&gt;Twitter Gem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find interesting tweets and write down the code snippets next to the results.&lt;/p&gt;

&lt;p&gt;Ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The last 3 tweets about Trump.&lt;/li&gt;
  &lt;li&gt;Funniest joke of the day (most retweeted / favourited?)&lt;/li&gt;
  &lt;li&gt;Quote of the day (most retweeted / favourited?)&lt;/li&gt;
  &lt;li&gt;Top 3 news stories in the UK&lt;/li&gt;
  &lt;li&gt;Most retweeted thing in the whole of Twitter?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Style with Bootstrap &amp;amp; jQuery&lt;/p&gt;

&lt;p&gt;Extras: Try using &lt;a href=&quot;https://github.com/guard/guard-livereload&quot;&gt;livereload&lt;/a&gt; to improve workflow&lt;/p&gt;

&lt;h3 id=&quot;learnings--docs&quot;&gt;Learnings &amp;amp; docs&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;news-media-headline-analyzer&quot;&gt;#2 — News media headline analyzer&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Plan&lt;/em&gt;
Scrape x number of new sites for headlines with Mechanize / Nokogiri&lt;/p&gt;

&lt;p&gt;Save to database a sentiment and a sentiment score from the sentimental gem for each headline.&lt;/p&gt;

&lt;p&gt;Display how positive / negative each media outlet is.&lt;/p&gt;

&lt;p&gt;Optional: heatmap of negative / positive by score.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learnings &amp;amp; docs&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:00:00 +0100</pubDate>
        <link>/webdev/ruby-practice-apps</link>
        <guid isPermaLink="true">/webdev/ruby-practice-apps</guid>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>Truthy / Falsey For (Ruby) Noobs</title>
        <description>&lt;p&gt;Ok, this one’s real easy but interesting so lets start at the beginning.&lt;/p&gt;

&lt;p&gt;When you want to check one thing against another, you write a method that replies - &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the most basic level, it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;more_than_ten?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;more_than_ten?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you use boolean symbols, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;, &amp;lt;, =&amp;gt;, =&amp;lt;, !, ||, &amp;amp;&amp;amp;,&lt;/code&gt; you are telling ruby you want a &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;No matter what you use these boolean “operators” on, ruby will try to convert it into &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. If you ask ruby if an empty string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; is true, it will tell you it is.&lt;/p&gt;

&lt;p&gt;This seems strange because an empty string has nothing in it. And in fact, in other languages, the interpreter will tell you it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But when in ruby, we have to accept that it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When one converts a non-boolean piece of data like an array, string, hash, number etc… into a &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; value, we say it’s “truthy” or “falsey”.
It’s &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; (but not &lt;em&gt;really&lt;/em&gt; true).&lt;/p&gt;

&lt;p&gt;There are interesting ways to use this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;truthy_or_falsey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is truthy&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is falsey&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;truthy_or_falsey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# true is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# false is falsey&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Object is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 0 is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 1 is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# nil is falsey&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# true is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# false is falsey&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &quot;&quot; is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [1, 2, 3] is truthy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# {} is truthy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In Ruby, only &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; are falsey, everything else is truthy: &lt;code class=&quot;highlighter-rouge&quot;&gt;[], {}, &quot;&quot;, 0, 1, true, Object, [1,2,3]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This can lead to very cute bits of code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logged_in?&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;!current_user&lt;/code&gt; forces the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;current_user&lt;/code&gt; into a boolean. A bang is the “not” operator, so it will return the opposite of it’s actual value, so we add another bang &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; to change it &lt;em&gt;back&lt;/em&gt; to it’s actual &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; value. If we added another &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; it would change it &lt;em&gt;back&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Clever.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Apr 2016 00:00:00 +0100</pubDate>
        <link>/webdev/truthy-falsey</link>
        <guid isPermaLink="true">/webdev/truthy-falsey</guid>
        
        
        <category>webdev</category>
        
      </item>
    
  </channel>
</rss>
